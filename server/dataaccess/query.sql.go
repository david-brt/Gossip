// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package dataaccess

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (user_id, session_id)
VALUES ($1, $2)
RETURNING user_id, session_id, created_at, expires_at
`

type CreateSessionParams struct {
	UserID    pgtype.Int4
	SessionID string
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, createSession, arg.UserID, arg.SessionID)
	var i Session
	err := row.Scan(
		&i.UserID,
		&i.SessionID,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (phone_number)
VALUES ($1)
RETURNING user_id
`

func (q *Queries) CreateUser(ctx context.Context, phoneNumber string) (int32, error) {
	row := q.db.QueryRow(ctx, createUser, phoneNumber)
	var user_id int32
	err := row.Scan(&user_id)
	return user_id, err
}

const existsUserByPhoneNumber = `-- name: ExistsUserByPhoneNumber :one
SELECT EXISTS (SELECT 1 FROM users WHERE phone_number = $1) AS exists
`

func (q *Queries) ExistsUserByPhoneNumber(ctx context.Context, phoneNumber string) (bool, error) {
	row := q.db.QueryRow(ctx, existsUserByPhoneNumber, phoneNumber)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getSession = `-- name: GetSession :one
SELECT user_id, session_id, created_at, expires_at FROM sessions
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetSession(ctx context.Context, userID pgtype.Int4) (Session, error) {
	row := q.db.QueryRow(ctx, getSession, userID)
	var i Session
	err := row.Scan(
		&i.UserID,
		&i.SessionID,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT user_id, username, phone_number, profile_picture FROM users WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, userID int32) (User, error) {
	row := q.db.QueryRow(ctx, getUser, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.PhoneNumber,
		&i.ProfilePicture,
	)
	return i, err
}

const getUserByPhoneNumber = `-- name: GetUserByPhoneNumber :one
SELECT user_id, username, phone_number, profile_picture FROM users WHERE phone_number = $1 LIMIT 1
`

func (q *Queries) GetUserByPhoneNumber(ctx context.Context, phoneNumber string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByPhoneNumber, phoneNumber)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.PhoneNumber,
		&i.ProfilePicture,
	)
	return i, err
}
